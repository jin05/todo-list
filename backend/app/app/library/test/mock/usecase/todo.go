// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/todo.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	domain "todo-list/app/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoUseCase is a mock of TodoUseCase interface.
type MockTodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUseCaseMockRecorder
}

// MockTodoUseCaseMockRecorder is the mock recorder for MockTodoUseCase.
type MockTodoUseCaseMockRecorder struct {
	mock *MockTodoUseCase
}

// NewMockTodoUseCase creates a new mock instance.
func NewMockTodoUseCase(ctrl *gomock.Controller) *MockTodoUseCase {
	mock := &MockTodoUseCase{ctrl: ctrl}
	mock.recorder = &MockTodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUseCase) EXPECT() *MockTodoUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoUseCase) Create(authID, title, content string) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", authID, title, content)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTodoUseCaseMockRecorder) Create(authID, title, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoUseCase)(nil).Create), authID, title, content)
}

// Delete mocks base method.
func (m *MockTodoUseCase) Delete(authID string, todoID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", authID, todoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoUseCaseMockRecorder) Delete(authID, todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoUseCase)(nil).Delete), authID, todoID)
}

// Get mocks base method.
func (m *MockTodoUseCase) Get(authID string, todoID int64) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", authID, todoID)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTodoUseCaseMockRecorder) Get(authID, todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTodoUseCase)(nil).Get), authID, todoID)
}

// List mocks base method.
func (m *MockTodoUseCase) List(authID, keyword, searchTarget string) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", authID, keyword, searchTarget)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTodoUseCaseMockRecorder) List(authID, keyword, searchTarget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoUseCase)(nil).List), authID, keyword, searchTarget)
}

// Update mocks base method.
func (m *MockTodoUseCase) Update(authID string, todoID int64, title, content string, checked bool) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", authID, todoID, title, content, checked)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTodoUseCaseMockRecorder) Update(authID, todoID, title, content, checked interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoUseCase)(nil).Update), authID, todoID, title, content, checked)
}
